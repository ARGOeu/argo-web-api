(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{83:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),c=(a(0),a(93)),i={id:"topology_service_types",title:"Topology Service Types"},o={unversionedId:"topology_service_types",id:"topology_service_types",isDocsHomePage:!1,title:"Topology Service Types",description:"API calls for handling topology list of service types",source:"@site/docs/topology_service_types.md",slug:"/topology_service_types",permalink:"/argo-web-api/docs/topology_service_types",version:"current",sidebar:"someSidebar",previous:{title:"Topology Endpoints",permalink:"/argo-web-api/docs/topology_endpoints"},next:{title:"Topology Statistics",permalink:"/argo-web-api/docs/topology_stats"}},l=[{value:"API calls for handling topology list of service types",id:"api-calls-for-handling-topology-list-of-service-types",children:[]},{value:"POST: Create list of service types for specific date",id:"post-create-list-of-service-types-for-specific-date",children:[{value:"Input",id:"input",children:[]},{value:"POST BODY",id:"post-body",children:[]},{value:"Response body",id:"response-body",children:[]}]},{value:"409 Conflict when trying to insert a topology that already exists",id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists",children:[{value:"Response Code",id:"response-code-1",children:[]},{value:"Response body",id:"response-body-1",children:[]}]},{value:"GET: List service types for specific date",id:"get-list-service-types-for-specific-date",children:[{value:"Input",id:"input-1",children:[]},{value:"Response body",id:"response-body-2",children:[]}]},{value:"DELETE: Delete list of service types for specific date",id:"delete-delete-list-of-service-types-for-specific-date",children:[{value:"Input",id:"input-2",children:[]},{value:"Response",id:"response",children:[]}]}],s={rightToc:l};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"api-calls-for-handling-topology-list-of-service-types"},"API calls for handling topology list of service types"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Shortcut"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"POST: Create list of service types for specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Creates a daily list of available service types for the specific tenant"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",{href:"#1"},"Description"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"GET: List service types for specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Lists the available service types per tenant for a specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",{href:"#2"},"Description"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"DELETE: Delete list of service types for specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Delete List of available service types for a specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",{href:"#3"},"Description"))))),Object(c.b)("a",{id:"1"}),Object(c.b)("h2",{id:"post-create-list-of-service-types-for-specific-date"},"POST: Create list of service types for specific date"),Object(c.b)("p",null,"Creates a daily list of available service types for the specific tenant"),Object(c.b)("h3",{id:"input"},"Input"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"POST /topology/service-types?date=YYYY-MM-DD\n")),Object(c.b)("h4",{id:"url-parameters"},"Url Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"date")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"target a specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"NO"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"today's date")))),Object(c.b)("h4",{id:"headers"},"Headers"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"x-api-key: secret_key_value\nAccept: application/json\n")),Object(c.b)("h3",{id:"post-body"},"POST BODY"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "name": "Service_Type_A",\n    "description": "a short descritpion of service type a"\n  },\n  {\n    "name": "Service_Type_B",\n    "description": "a short descritpion of service type b"\n  },\n  {\n    "name": "Service_Type_C",\n    "description": "a short descritpion of service type c"\n  }\n]\n')),Object(c.b)("h4",{id:"response-code"},"Response Code"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"Status: 201 OK Created\n")),Object(c.b)("h3",{id:"response-body"},"Response body"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "message": "Topology of 3 service types created for date: YYYY-MM-DD",\n    "code": "201"\n}\n')),Object(c.b)("h2",{id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists"},"409 Conflict when trying to insert a topology that already exists"),Object(c.b)("p",null,"When trying to insert a topology for a specific date that already exists the api will answer with the following reponse:"),Object(c.b)("h3",{id:"response-code-1"},"Response Code"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"Status: 409 Conflict\n")),Object(c.b)("h3",{id:"response-body-1"},"Response body"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "message": "Topology list of service types already exists for date: YYYY-MM-DD, please either update it or delete it first!",\n    "code": "409"\n}\n')),Object(c.b)("p",null,"User can proceed with either updating the existing topology OR deleting before trying to create it anew"),Object(c.b)("a",{id:"2"}),Object(c.b)("h2",{id:"get-list-service-types-for-specific-date"},"GET: List service types for specific date"),Object(c.b)("p",null,"Lists the available service types per tenant for a specific date"),Object(c.b)("h3",{id:"input-1"},"Input"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"GET /topology/service-types?date=YYYY-MM-DD\n")),Object(c.b)("h4",{id:"url-parameters-1"},"Url Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default value"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"date")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"target a specific date"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"NO"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"today's date")))),Object(c.b)("h4",{id:"headers-1"},"Headers"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"x-api-key: secret_key_value\nAccept: application/json\n")),Object(c.b)("h4",{id:"example-request"},"Example Request"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"GET /topology/service-types?date=2019-03-03\n")),Object(c.b)("h4",{id:"response-code-2"},"Response Code"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"Status: 200 OK\n")),Object(c.b)("h3",{id:"response-body-2"},"Response body"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "status": {\n    "message": "Success",\n    "code": "200"\n  },\n  "data": [\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_A",\n      "description": "a short descritpion of service type a"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_B",\n      "description": "a short descritpion of service type b"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_C",\n      "description": "a short descritpion of service type c"\n    }\n  ]\n}\n')),Object(c.b)("a",{id:"3"}),Object(c.b)("h2",{id:"delete-delete-list-of-service-types-for-specific-date"},"[DELETE]",": Delete list of service types for specific date"),Object(c.b)("p",null,"This method can be used to delete all servic type items contributing to the list of available service types of a specific date"),Object(c.b)("h3",{id:"input-2"},"Input"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"DELETE /topology/service-types?date=YYYY-MM-DD\n")),Object(c.b)("h4",{id:"request-headers"},"Request headers"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"x-api-key: shared_key_value\nContent-Type: application/json\nAccept: application/json\n")),Object(c.b)("h3",{id:"response"},"Response"),Object(c.b)("p",null,"Headers: ",Object(c.b)("inlineCode",{parentName:"p"},"Status: 200 OK")),Object(c.b)("h4",{id:"response-body-3"},"Response body"),Object(c.b)("p",null,"Json Response"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "message": "Topology of 3 service types deleted for date: 2019-12-12",\n    "code": "200"\n}\n')))}p.isMDXComponent=!0},93:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(a),O=n,j=b["".concat(i,".").concat(O)]||b[O]||d[O]||c;return a?r.a.createElement(j,o(o({ref:t},s),{},{components:a})):r.a.createElement(j,o({ref:t},s))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,i=new Array(c);i[0]=O;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var s=2;s<c;s++)i[s]=a[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);