"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[848],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,m=u["".concat(s,".").concat(y)]||u[y]||c[y]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6779:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"topology_service_types",title:"Topology Service Types",sidebar_position:1},o=void 0,l={unversionedId:"topology/topology_service_types",id:"topology/topology_service_types",title:"Topology Service Types",description:"API calls for handling topology list of service types",source:"@site/docs/topology/topology_service_types.md",sourceDirName:"topology",slug:"/topology/topology_service_types",permalink:"/argo-web-api/docs/topology/topology_service_types",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"topology_service_types",title:"Topology Service Types",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Topology",permalink:"/argo-web-api/docs/category/topology"},next:{title:"Topology Endpoints",permalink:"/argo-web-api/docs/topology/topology_endpoints"}},s={},p=[{value:"API calls for handling topology list of service types",id:"api-calls-for-handling-topology-list-of-service-types",level:2},{value:"POST: Create list of service types for specific date",id:"post-create-list-of-service-types-for-specific-date",level:2},{value:"Input",id:"input",level:3},{value:"Url Parameters",id:"url-parameters",level:4},{value:"Headers",id:"headers",level:4},{value:"POST BODY",id:"post-body",level:3},{value:"Response Code",id:"response-code",level:4},{value:"Response body",id:"response-body",level:3},{value:"409 Conflict when trying to insert a topology that already exists",id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists",level:2},{value:"Response Code",id:"response-code-1",level:3},{value:"Response body",id:"response-body-1",level:3},{value:"GET: List service types for specific date",id:"get-list-service-types-for-specific-date",level:2},{value:"Input",id:"input-1",level:3},{value:"Url Parameters",id:"url-parameters-1",level:4},{value:"Headers",id:"headers-1",level:4},{value:"Example Request",id:"example-request",level:4},{value:"Response Code",id:"response-code-2",level:4},{value:"Response body",id:"response-body-2",level:3},{value:"Combined tenant example:",id:"combined-tenant-example",level:3},{value:"Example Request",id:"example-request-1",level:4},{value:"DELETE: Delete list of service types for specific date",id:"delete-delete-list-of-service-types-for-specific-date",level:2},{value:"Input",id:"input-2",level:3},{value:"Request headers",id:"request-headers",level:4},{value:"Response",id:"response",level:3},{value:"Response body",id:"response-body-3",level:4}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"api-calls-for-handling-topology-list-of-service-types"},"API calls for handling topology list of service types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Shortcut"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"POST: Create list of service types for specific date"),(0,r.kt)("td",{parentName:"tr",align:null},"Creates a daily list of available service types for the specific tenant"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{href:"#1"},"Description"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GET: List service types for specific date"),(0,r.kt)("td",{parentName:"tr",align:null},"Lists the available service types per tenant for a specific date"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{href:"#2"},"Description"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DELETE: Delete list of service types for specific date"),(0,r.kt)("td",{parentName:"tr",align:null},"Delete List of available service types for a specific date"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{href:"#3"},"Description"))))),(0,r.kt)("a",{id:"1"}),(0,r.kt)("h2",{id:"post-create-list-of-service-types-for-specific-date"},"POST: Create list of service types for specific date"),(0,r.kt)("p",null,"Creates a daily list of available service types for the specific tenant"),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST /topology/service-types?date=YYYY-MM-DD\n")),(0,r.kt)("h4",{id:"url-parameters"},"Url Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date")),(0,r.kt)("td",{parentName:"tr",align:null},"target a specific date"),(0,r.kt)("td",{parentName:"tr",align:null},"NO"),(0,r.kt)("td",{parentName:"tr",align:null},"today's date")))),(0,r.kt)("h4",{id:"headers"},"Headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"x-api-key: secret_key_value\nAccept: application/json\n")),(0,r.kt)("h3",{id:"post-body"},"POST BODY"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "Service_Type_A",\n    "title": "Service of type A",\n    "description": "a short descritpion of service type a"\n  },\n  {\n    "name": "Service_Type_B",\n    "title": "Service of type B",\n    "description": "a short descritpion of service type b"\n  },\n  {\n    "name": "Service_Type_C",\n    "title": "Service of type C",\n    "description": "a short descritpion of service type c",\n    "tags": ["special-service", "beta"]\n  }\n]\n')),(0,r.kt)("h4",{id:"response-code"},"Response Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Status: 201 OK Created\n")),(0,r.kt)("h3",{id:"response-body"},"Response body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "Topology of 3 service types created for date: YYYY-MM-DD",\n    "code": "201"\n}\n')),(0,r.kt)("h2",{id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists"},"409 Conflict when trying to insert a topology that already exists"),(0,r.kt)("p",null,"When trying to insert a topology for a specific date that already exists the api will answer with the following response:"),(0,r.kt)("h3",{id:"response-code-1"},"Response Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Status: 409 Conflict\n")),(0,r.kt)("h3",{id:"response-body-1"},"Response body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "Topology list of service types already exists for date: YYYY-MM-DD, please either update it or delete it first!",\n    "code": "409"\n}\n')),(0,r.kt)("p",null,"User can proceed with either updating the existing topology OR deleting before trying to create it anew"),(0,r.kt)("a",{id:"2"}),(0,r.kt)("h2",{id:"get-list-service-types-for-specific-date"},"GET: List service types for specific date"),(0,r.kt)("p",null,"Lists the available service types per tenant for a specific date"),(0,r.kt)("h3",{id:"input-1"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /topology/service-types?date=YYYY-MM-DD\n")),(0,r.kt)("h4",{id:"url-parameters-1"},"Url Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"date")),(0,r.kt)("td",{parentName:"tr",align:null},"target a specific date"),(0,r.kt)("td",{parentName:"tr",align:null},"NO"),(0,r.kt)("td",{parentName:"tr",align:null},"today's date")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mode")),(0,r.kt)("td",{parentName:"tr",align:null},"if stating ",(0,r.kt)("inlineCode",{parentName:"td"},"mode=combined")," then if the tenant has data feeds from other tenants their service lists will be combined in the final results"),(0,r.kt)("td",{parentName:"tr",align:null},"NO"),(0,r.kt)("td",{parentName:"tr",align:null},"empty")))),(0,r.kt)("h4",{id:"headers-1"},"Headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"x-api-key: secret_key_value\nAccept: application/json\n")),(0,r.kt)("h4",{id:"example-request"},"Example Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /topology/service-types?date=2019-03-03\n")),(0,r.kt)("h4",{id:"response-code-2"},"Response Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Status: 200 OK\n")),(0,r.kt)("h3",{id:"response-body-2"},"Response body"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": {\n    "message": "Success",\n    "code": "200"\n  },\n  "data": [\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_A",\n      "title": "Service of type A",\n      "description": "a short descritpion of service type a"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_B",\n      "title": "Service of type B",\n      "description": "a short descritpion of service type b"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_C",\n      "title": "Service of type C",\n      "description": "a short descritpion of service type c",\n      "tags": ["special-service", "beta"]\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"combined-tenant-example"},"Combined tenant example:"),(0,r.kt)("p",null,"If the tenant combines data feeds from other tenants (deemed a ",(0,r.kt)("inlineCode",{parentName:"p"},"combined")," tenant) then the optional url property ",(0,r.kt)("inlineCode",{parentName:"p"},"mode=combined")," can\nbe used to retrieve service types from all other included tenants combined in the final result. Each item retrieved from an included tenant receives an extra ",(0,r.kt)("inlineCode",{parentName:"p"},"tenant")," field to identify its origin"),(0,r.kt)("h4",{id:"example-request-1"},"Example Request"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"GET /topology/service-types?date=2019-03-03?mode=combined\n")),(0,r.kt)("p",null,'{\n"status": {\n"message": "Success",\n"code": "200"\n},\n"data": ','[\n{\n"date": "2019-03-03",\n"name": "TenantA-service-type1",\n"title": "Service type1 from tenant A",\n"description": "a short descritpion",\n"tenant": "TenantA"\n},\n{\n"date": "2019-03-03",\n"name": "TenantB-service-type1",\n"title": "Service type2 from tenant B",\n"description": "a short descritpion",\n"tenant": "TenantB"\n}\n]',"\n}"),(0,r.kt)("a",{id:"3"}),(0,r.kt)("h2",{id:"delete-delete-list-of-service-types-for-specific-date"},"[DELETE]",": Delete list of service types for specific date"),(0,r.kt)("p",null,"This method can be used to delete all service type items contributing to the list of available service types of a specific date"),(0,r.kt)("h3",{id:"input-2"},"Input"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DELETE /topology/service-types?date=YYYY-MM-DD\n")),(0,r.kt)("h4",{id:"request-headers"},"Request headers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"x-api-key: shared_key_value\nContent-Type: application/json\nAccept: application/json\n")),(0,r.kt)("h3",{id:"response"},"Response"),(0,r.kt)("p",null,"Headers: ",(0,r.kt)("inlineCode",{parentName:"p"},"Status: 200 OK")),(0,r.kt)("h4",{id:"response-body-3"},"Response body"),(0,r.kt)("p",null,"Json Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "Topology of 3 service types deleted for date: 2019-12-12",\n    "code": "200"\n}\n')))}c.isMDXComponent=!0}}]);