"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2282],{2572:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>o});var r=n(4848),t=n(8453);const i={id:"validations",title:"API Validations",sidebar_position:2},d=void 0,a={id:"validation_and_errors/validations",title:"API Validations",description:"Parameters validations",source:"@site/docs/validation_and_errors/validations.md",sourceDirName:"validation_and_errors",slug:"/validation_and_errors/validations",permalink:"/argo-web-api/docs/validation_and_errors/validations",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"validations",title:"API Validations",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"API Errors",permalink:"/argo-web-api/docs/validation_and_errors/errors"},next:{title:"API Version 3",permalink:"/argo-web-api/docs/category/api-version-3"}},l={},o=[{value:"Parameters validations",id:"parameters-validations",level:2},{value:"<code>start_time</code>",id:"1",level:3},{value:"<code>end_time</code>",id:"2",level:3},{value:"No time span set",id:"no-time-span-set",level:4},{value:"<code>exec_time</code>",id:"3",level:3},{value:"<code>granularity</code>",id:"4",level:3},{value:"Headers validations",id:"headers-validations",level:2},{value:"<code>Accept</code>",id:"5",level:3}];function c(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"parameters-validations",children:"Parameters validations"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Affected Resources"}),(0,r.jsx)(s.th,{children:"Verb"}),(0,r.jsx)(s.th,{children:"Shortcut"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"start_time"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"/results"}),", ",(0,r.jsx)(s.code,{children:"/status"})]}),(0,r.jsx)(s.td,{children:"GET"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"#1",children:"Description"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"end_time"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"/results"}),", ",(0,r.jsx)(s.code,{children:"/status"})]}),(0,r.jsx)(s.td,{children:"GET"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"#2",children:"Description"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"exec_time"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"/metric_result"})}),(0,r.jsx)(s.td,{children:"GET"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"#3",children:"Description"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"granularity"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"/results"})}),(0,r.jsx)(s.td,{children:"GET"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"#4",children:"Description"})})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"1",children:(0,r.jsx)(s.code,{children:"start_time"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"start_time"})," query parameter is used under the ",(0,r.jsx)(s.code,{children:"/results"})," and ",(0,r.jsx)(s.code,{children:"/status"})," resources to define the starting time of the query used to match A/R or status results respectively. The value should be given in zulu format like so: ",(0,r.jsx)(s.code,{children:"2006-01-02T15:04:05Z"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"In case the parameter is not provided the following response is returned"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "start_time not set",\n   "code": "400",\n   "details": "Please use start_time url parameter in zulu format (like 2006-01-02T15:04:05Z) to indicate the query start time"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"In case the parameter value is malformed (not in zulu expected format) the following response is returned:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "start_time parsing error",\n   "code": "400",\n   "details": "Error parsing date string %s please use zulu format like 2006-01-02T15:04:05Z"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"2",children:(0,r.jsx)(s.code,{children:"end_time"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"end_time"})," query parameter is used under the ",(0,r.jsx)(s.code,{children:"/results"})," and ",(0,r.jsx)(s.code,{children:"/status"})," resources to define the ending time of the query used to match A/R or status results respectively. The value should be given in zulu format like so: ",(0,r.jsx)(s.code,{children:"2006-01-02T15:04:05Z"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"In case the parameter is not provided the following response is returned"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "end_time not set",\n   "code": "400",\n   "details": "Please use end_time url parameter in zulu format (like 2006-01-02T15:04:05Z) to indicate the query end time"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"In case the parameter value is malformed (not in zulu expected format) the following response is returned:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "end_time parsing error",\n   "code": "400",\n   "details": "Error parsing date string %s please use zulu format like 2006-01-02T15:04:05Z"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.h4,{id:"no-time-span-set",children:"No time span set"}),"\n",(0,r.jsxs)(s.p,{children:["In case neither the ",(0,r.jsx)(s.code,{children:"start_time"})," nor the ",(0,r.jsx)(s.code,{children:"end_time"})," parameters are defined the following response is returned by the api:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "No time span set",\n   "code": "400",\n   "details": "Please use start_time and end_time url parameters to set the prefered time span"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"3",children:(0,r.jsx)(s.code,{children:"exec_time"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"exec_time"})," query parameter is used under the ",(0,r.jsx)(s.code,{children:"/metric_result"})," resource to define the execution time of the metric result to fetch from the datastore. The value should be given in zulu format like so: ",(0,r.jsx)(s.code,{children:"2006-01-02T15:04:05Z"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"In case the parameter is not provided the following response is returned"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "exec_time not set",\n   "code": "400",\n   "details": "Please use exec_time url parameter in zulu format (like 2006-01-02T15:04:05Z) to indicate the exact probe execution time"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"In case the parameter value is malformed (not in zulu expected format) the following response is returned:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "exec_time parsing error",\n   "code": "400",\n   "details": "Error parsing date string %s please use zulu format like 2006-01-02T15:04:05Z"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.h3,{id:"4",children:(0,r.jsx)(s.code,{children:"granularity"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"granularity"})," query parameter is used ",(0,r.jsx)(s.em,{children:"optionally"})," under the ",(0,r.jsx)(s.code,{children:"/results"})," resource to indicate the granularity level. It's value may be either monthly or daily. If not set by the user ",(0,r.jsx)(s.code,{children:"monthly"})," is used."]}),"\n",(0,r.jsxs)(s.p,{children:["In case the parameter value is malformed (neither ",(0,r.jsx)(s.code,{children:"daily"}),", ",(0,r.jsx)(s.code,{children:"monthly"})," or ",(0,r.jsx)(s.code,{children:"custom"}),") the following response is returned:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "Wrong Granularity",\n   "code": "400",\n   "details": "%s is not accepted as granularity parameter, please provide either daily, monthly or custom"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"The Granularity parameter is only relevant for a/r result requests. For status requests granularity is not supported. In order to avoid confusion, if a user provides granularity parameter during status requests the following response is returned:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Bad Request",\n  "code": "400"\n },\n "errors": [\n  {\n   "message": "Granularity parameter should not be used in status results",\n   "code": "400",\n   "details": "Granularity parameter is valid only for a/r result requests, not for status results"\n  }\n ]\n}\n'})}),"\n",(0,r.jsx)(s.h2,{id:"headers-validations",children:"Headers validations"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Name"}),(0,r.jsx)(s.th,{children:"Affected Resources"}),(0,r.jsx)(s.th,{children:"Shortcut"})]})}),(0,r.jsx)(s.tbody,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"Accept"})}),(0,r.jsx)(s.td,{children:"All"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.a,{href:"#5",children:"Description"})})]})})]}),"\n",(0,r.jsx)(s.h3,{id:"5",children:(0,r.jsx)(s.code,{children:"Accept"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"Accept"})," header is compulsory to use under all api resources. Its value may be either ",(0,r.jsx)(s.code,{children:"application/json"})," or ",(0,r.jsx)(s.code,{children:"application/xml"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"In case the Accept header is not provided or is provided but is malformed the following error response is returned by the api:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'{\n "status": {\n  "message": "Not Acceptable Content Type",\n  "code": "406",\n  "details": "Accept header provided did not contain any valid content types. Acceptable content types are \'application/xml\' and \'application/json\'"\n }\n}\n'})})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>a});var r=n(6540);const t={},i=r.createContext(t);function d(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);