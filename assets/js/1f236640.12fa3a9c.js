"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[848],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),y=p(a),u=n,f=y["".concat(s,".").concat(u)]||y[u]||c[u]||o;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}y.displayName="MDXCreateElement"},9026:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={id:"topology_service_types",title:"Topology Service Types",sidebar_position:1},l=void 0,i={unversionedId:"topology/topology_service_types",id:"topology/topology_service_types",title:"Topology Service Types",description:"API calls for handling topology list of service types",source:"@site/docs/topology/topology_service_types.md",sourceDirName:"topology",slug:"/topology/topology_service_types",permalink:"/argo-web-api/docs/topology/topology_service_types",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"topology_service_types",title:"Topology Service Types",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Topology",permalink:"/argo-web-api/docs/category/topology"},next:{title:"Topology Endpoints",permalink:"/argo-web-api/docs/topology/topology_endpoints"}},s={},p=[{value:"API calls for handling topology list of service types",id:"api-calls-for-handling-topology-list-of-service-types",level:2},{value:"POST: Create list of service types for specific date",id:"post-create-list-of-service-types-for-specific-date",level:2},{value:"Input",id:"input",level:3},{value:"Url Parameters",id:"url-parameters",level:4},{value:"Headers",id:"headers",level:4},{value:"POST BODY",id:"post-body",level:3},{value:"Response Code",id:"response-code",level:4},{value:"Response body",id:"response-body",level:3},{value:"409 Conflict when trying to insert a topology that already exists",id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists",level:2},{value:"Response Code",id:"response-code-1",level:3},{value:"Response body",id:"response-body-1",level:3},{value:"GET: List service types for specific date",id:"get-list-service-types-for-specific-date",level:2},{value:"Input",id:"input-1",level:3},{value:"Url Parameters",id:"url-parameters-1",level:4},{value:"Headers",id:"headers-1",level:4},{value:"Example Request",id:"example-request",level:4},{value:"Response Code",id:"response-code-2",level:4},{value:"Response body",id:"response-body-2",level:3},{value:"DELETE: Delete list of service types for specific date",id:"delete-delete-list-of-service-types-for-specific-date",level:2},{value:"Input",id:"input-2",level:3},{value:"Request headers",id:"request-headers",level:4},{value:"Response",id:"response",level:3},{value:"Response body",id:"response-body-3",level:4}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"api-calls-for-handling-topology-list-of-service-types"},"API calls for handling topology list of service types"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Shortcut"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"POST: Create list of service types for specific date"),(0,n.kt)("td",{parentName:"tr",align:null},"Creates a daily list of available service types for the specific tenant"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{href:"#1"},"Description"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"GET: List service types for specific date"),(0,n.kt)("td",{parentName:"tr",align:null},"Lists the available service types per tenant for a specific date"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{href:"#2"},"Description"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DELETE: Delete list of service types for specific date"),(0,n.kt)("td",{parentName:"tr",align:null},"Delete List of available service types for a specific date"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{href:"#3"},"Description"))))),(0,n.kt)("a",{id:"1"}),(0,n.kt)("h2",{id:"post-create-list-of-service-types-for-specific-date"},"POST: Create list of service types for specific date"),(0,n.kt)("p",null,"Creates a daily list of available service types for the specific tenant"),(0,n.kt)("h3",{id:"input"},"Input"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"POST /topology/service-types?date=YYYY-MM-DD\n")),(0,n.kt)("h4",{id:"url-parameters"},"Url Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"),(0,n.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"date")),(0,n.kt)("td",{parentName:"tr",align:null},"target a specific date"),(0,n.kt)("td",{parentName:"tr",align:null},"NO"),(0,n.kt)("td",{parentName:"tr",align:null},"today's date")))),(0,n.kt)("h4",{id:"headers"},"Headers"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"x-api-key: secret_key_value\nAccept: application/json\n")),(0,n.kt)("h3",{id:"post-body"},"POST BODY"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "Service_Type_A",\n    "description": "a short descritpion of service type a"\n  },\n  {\n    "name": "Service_Type_B",\n    "description": "a short descritpion of service type b"\n  },\n  {\n    "name": "Service_Type_C",\n    "description": "a short descritpion of service type c"\n  }\n]\n')),(0,n.kt)("h4",{id:"response-code"},"Response Code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Status: 201 OK Created\n")),(0,n.kt)("h3",{id:"response-body"},"Response body"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "Topology of 3 service types created for date: YYYY-MM-DD",\n    "code": "201"\n}\n')),(0,n.kt)("h2",{id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists"},"409 Conflict when trying to insert a topology that already exists"),(0,n.kt)("p",null,"When trying to insert a topology for a specific date that already exists the api will answer with the following response:"),(0,n.kt)("h3",{id:"response-code-1"},"Response Code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Status: 409 Conflict\n")),(0,n.kt)("h3",{id:"response-body-1"},"Response body"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "Topology list of service types already exists for date: YYYY-MM-DD, please either update it or delete it first!",\n    "code": "409"\n}\n')),(0,n.kt)("p",null,"User can proceed with either updating the existing topology OR deleting before trying to create it anew"),(0,n.kt)("a",{id:"2"}),(0,n.kt)("h2",{id:"get-list-service-types-for-specific-date"},"GET: List service types for specific date"),(0,n.kt)("p",null,"Lists the available service types per tenant for a specific date"),(0,n.kt)("h3",{id:"input-1"},"Input"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /topology/service-types?date=YYYY-MM-DD\n")),(0,n.kt)("h4",{id:"url-parameters-1"},"Url Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"),(0,n.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"date")),(0,n.kt)("td",{parentName:"tr",align:null},"target a specific date"),(0,n.kt)("td",{parentName:"tr",align:null},"NO"),(0,n.kt)("td",{parentName:"tr",align:null},"today's date")))),(0,n.kt)("h4",{id:"headers-1"},"Headers"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"x-api-key: secret_key_value\nAccept: application/json\n")),(0,n.kt)("h4",{id:"example-request"},"Example Request"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"GET /topology/service-types?date=2019-03-03\n")),(0,n.kt)("h4",{id:"response-code-2"},"Response Code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"Status: 200 OK\n")),(0,n.kt)("h3",{id:"response-body-2"},"Response body"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "status": {\n    "message": "Success",\n    "code": "200"\n  },\n  "data": [\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_A",\n      "description": "a short descritpion of service type a"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_B",\n      "description": "a short descritpion of service type b"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_C",\n      "description": "a short descritpion of service type c"\n    }\n  ]\n}\n')),(0,n.kt)("a",{id:"3"}),(0,n.kt)("h2",{id:"delete-delete-list-of-service-types-for-specific-date"},"[DELETE]",": Delete list of service types for specific date"),(0,n.kt)("p",null,"This method can be used to delete all service type items contributing to the list of available service types of a specific date"),(0,n.kt)("h3",{id:"input-2"},"Input"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"DELETE /topology/service-types?date=YYYY-MM-DD\n")),(0,n.kt)("h4",{id:"request-headers"},"Request headers"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"x-api-key: shared_key_value\nContent-Type: application/json\nAccept: application/json\n")),(0,n.kt)("h3",{id:"response"},"Response"),(0,n.kt)("p",null,"Headers: ",(0,n.kt)("inlineCode",{parentName:"p"},"Status: 200 OK")),(0,n.kt)("h4",{id:"response-body-3"},"Response body"),(0,n.kt)("p",null,"Json Response"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "message": "Topology of 3 service types deleted for date: 2019-12-12",\n    "code": "200"\n}\n')))}c.isMDXComponent=!0}}]);