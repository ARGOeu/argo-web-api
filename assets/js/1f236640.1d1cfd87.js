"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5011],{7167:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var t=n(4848),i=n(8453);const r={id:"topology_service_types",title:"Topology Service Types",sidebar_position:1},o=void 0,d={id:"topology/topology_service_types",title:"Topology Service Types",description:"API calls for handling topology list of service types",source:"@site/docs/topology/topology_service_types.md",sourceDirName:"topology",slug:"/topology/topology_service_types",permalink:"/argo-web-api/docs/topology/topology_service_types",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"topology_service_types",title:"Topology Service Types",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Topology",permalink:"/argo-web-api/docs/category/topology"},next:{title:"Topology Endpoints",permalink:"/argo-web-api/docs/topology/topology_endpoints"}},l={},c=[{value:"API calls for handling topology list of service types",id:"api-calls-for-handling-topology-list-of-service-types",level:2},{value:"POST: Create list of service types for specific date",id:"1",level:2},{value:"Input",id:"input",level:3},{value:"Url Parameters",id:"url-parameters",level:4},{value:"Headers",id:"headers",level:4},{value:"POST BODY",id:"post-body",level:3},{value:"Response Code",id:"response-code",level:4},{value:"Response body",id:"response-body",level:3},{value:"409 Conflict when trying to insert a topology that already exists",id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists",level:2},{value:"Response Code",id:"response-code-1",level:3},{value:"Response body",id:"response-body-1",level:3},{value:"GET: List service types for specific date",id:"2",level:2},{value:"Input",id:"input-1",level:3},{value:"Url Parameters",id:"url-parameters-1",level:4},{value:"Headers",id:"headers-1",level:4},{value:"Example Request",id:"example-request",level:4},{value:"Response Code",id:"response-code-2",level:4},{value:"Response body",id:"response-body-2",level:3},{value:"Combined tenant example:",id:"combined-tenant-example",level:3},{value:"Example Request",id:"example-request-1",level:4},{value:"[DELETE]: Delete list of service types for specific date",id:"3",level:2},{value:"Input",id:"input-2",level:3},{value:"Request headers",id:"request-headers",level:4},{value:"Response",id:"response",level:3},{value:"Response body",id:"response-body-3",level:4}];function a(e){const s={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"api-calls-for-handling-topology-list-of-service-types",children:"API calls for handling topology list of service types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Name"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Shortcut"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"POST: Create list of service types for specific date"}),(0,t.jsx)(s.td,{children:"Creates a daily list of available service types for the specific tenant"}),(0,t.jsx)(s.td,{children:(0,t.jsx)("a",{href:"#1",children:"Description"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"GET: List service types for specific date"}),(0,t.jsx)(s.td,{children:"Lists the available service types per tenant for a specific date"}),(0,t.jsx)(s.td,{children:(0,t.jsx)("a",{href:"#2",children:"Description"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DELETE: Delete list of service types for specific date"}),(0,t.jsx)(s.td,{children:"Delete List of available service types for a specific date"}),(0,t.jsx)(s.td,{children:(0,t.jsx)("a",{href:"#3",children:"Description"})})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"1",children:"POST: Create list of service types for specific date"}),"\n",(0,t.jsx)(s.p,{children:"Creates a daily list of available service types for the specific tenant"}),"\n",(0,t.jsx)(s.h3,{id:"input",children:"Input"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"POST /topology/service-types?date=YYYY-MM-DD\n"})}),"\n",(0,t.jsx)(s.h4,{id:"url-parameters",children:"Url Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Required"}),(0,t.jsx)(s.th,{children:"Default value"})]})}),(0,t.jsx)(s.tbody,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"date"})}),(0,t.jsx)(s.td,{children:"target a specific date"}),(0,t.jsx)(s.td,{children:"NO"}),(0,t.jsx)(s.td,{children:"today's date"})]})})]}),"\n",(0,t.jsx)(s.h4,{id:"headers",children:"Headers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"x-api-key: secret_key_value\nAccept: application/json\n"})}),"\n",(0,t.jsx)(s.h3,{id:"post-body",children:"POST BODY"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'[\n  {\n    "name": "Service_Type_A",\n    "title": "Service of type A",\n    "description": "a short descritpion of service type a"\n  },\n  {\n    "name": "Service_Type_B",\n    "title": "Service of type B",\n    "description": "a short descritpion of service type b"\n  },\n  {\n    "name": "Service_Type_C",\n    "title": "Service of type C",\n    "description": "a short descritpion of service type c",\n    "tags": ["special-service", "beta"]\n  }\n]\n'})}),"\n",(0,t.jsx)(s.h4,{id:"response-code",children:"Response Code"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Status: 201 OK Created\n"})}),"\n",(0,t.jsx)(s.h3,{id:"response-body",children:"Response body"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n    "message": "Topology of 3 service types created for date: YYYY-MM-DD",\n    "code": "201"\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"409-conflict-when-trying-to-insert-a-topology-that-already-exists",children:"409 Conflict when trying to insert a topology that already exists"}),"\n",(0,t.jsx)(s.p,{children:"When trying to insert a topology for a specific date that already exists the api will answer with the following response:"}),"\n",(0,t.jsx)(s.h3,{id:"response-code-1",children:"Response Code"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Status: 409 Conflict\n"})}),"\n",(0,t.jsx)(s.h3,{id:"response-body-1",children:"Response body"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n    "message": "Topology list of service types already exists for date: YYYY-MM-DD, please either update it or delete it first!",\n    "code": "409"\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"User can proceed with either updating the existing topology OR deleting before trying to create it anew"}),"\n",(0,t.jsx)(s.h2,{id:"2",children:"GET: List service types for specific date"}),"\n",(0,t.jsx)(s.p,{children:"Lists the available service types per tenant for a specific date"}),"\n",(0,t.jsx)(s.h3,{id:"input-1",children:"Input"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"GET /topology/service-types?date=YYYY-MM-DD\n"})}),"\n",(0,t.jsx)(s.h4,{id:"url-parameters-1",children:"Url Parameters"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Required"}),(0,t.jsx)(s.th,{children:"Default value"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"date"})}),(0,t.jsx)(s.td,{children:"target a specific date"}),(0,t.jsx)(s.td,{children:"NO"}),(0,t.jsx)(s.td,{children:"today's date"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"mode"})}),(0,t.jsxs)(s.td,{children:["if stating ",(0,t.jsx)(s.code,{children:"mode=combined"})," then if the tenant has data feeds from other tenants their service lists will be combined in the final results"]}),(0,t.jsx)(s.td,{children:"NO"}),(0,t.jsx)(s.td,{children:"empty"})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"headers-1",children:"Headers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"x-api-key: secret_key_value\nAccept: application/json\n"})}),"\n",(0,t.jsx)(s.h4,{id:"example-request",children:"Example Request"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"GET /topology/service-types?date=2019-03-03\n"})}),"\n",(0,t.jsx)(s.h4,{id:"response-code-2",children:"Response Code"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Status: 200 OK\n"})}),"\n",(0,t.jsx)(s.h3,{id:"response-body-2",children:"Response body"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "status": {\n    "message": "Success",\n    "code": "200"\n  },\n  "data": [\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_A",\n      "title": "Service of type A",\n      "description": "a short descritpion of service type a"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_B",\n      "title": "Service of type B",\n      "description": "a short descritpion of service type b"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "Service_Type_C",\n      "title": "Service of type C",\n      "description": "a short descritpion of service type c",\n      "tags": ["special-service", "beta"]\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"combined-tenant-example",children:"Combined tenant example:"}),"\n",(0,t.jsxs)(s.p,{children:["If the tenant combines data feeds from other tenants (deemed a ",(0,t.jsx)(s.code,{children:"combined"})," tenant) then the optional url property ",(0,t.jsx)(s.code,{children:"mode=combined"})," can\nbe used to retrieve service types from all other included tenants combined in the final result. Each item retrieved from an included tenant receives an extra ",(0,t.jsx)(s.code,{children:"tenant"})," field to identify its origin"]}),"\n",(0,t.jsx)(s.h4,{id:"example-request-1",children:"Example Request"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"GET /topology/service-types?date=2019-03-03?mode=combined\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "status": {\n    "message": "Success",\n    "code": "200"\n  },\n  "data": [\n    {\n      "date": "2019-03-03",\n      "name": "TenantA-service-type1",\n      "title": "Service type1 from tenant A",\n      "description": "a short descritpion",\n      "tenant": "TenantA"\n    },\n    {\n      "date": "2019-03-03",\n      "name": "TenantB-service-type1",\n      "title": "Service type2 from tenant B",\n      "description": "a short descritpion",\n      "tenant": "TenantB"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"3",children:"[DELETE]: Delete list of service types for specific date"}),"\n",(0,t.jsx)(s.p,{children:"This method can be used to delete all service type items contributing to the list of available service types of a specific date"}),"\n",(0,t.jsx)(s.h3,{id:"input-2",children:"Input"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"DELETE /topology/service-types?date=YYYY-MM-DD\n"})}),"\n",(0,t.jsx)(s.h4,{id:"request-headers",children:"Request headers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"x-api-key: shared_key_value\nContent-Type: application/json\nAccept: application/json\n"})}),"\n",(0,t.jsx)(s.h3,{id:"response",children:"Response"}),"\n",(0,t.jsxs)(s.p,{children:["Headers: ",(0,t.jsx)(s.code,{children:"Status: 200 OK"})]}),"\n",(0,t.jsx)(s.h4,{id:"response-body-3",children:"Response body"}),"\n",(0,t.jsx)(s.p,{children:"Json Response"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n    "message": "Topology of 3 service types deleted for date: 2019-12-12",\n    "code": "200"\n}\n'})})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>d});var t=n(6540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);